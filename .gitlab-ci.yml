stages:
  - dist
  - source
  - build
  - test

variables:
  APT_OPTS: "-y -q -q -o dir::cache::archives=${CI_PROJECT_DIR}/.cache/apt"
  PKG_NAME: "gwdatafind"
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  GIT_STRATEGY: none
  YUM_OPTS: "-y -q --setopt=cachedir=${CI_PROJECT_DIR}/.cache/yum --setopt=keepcache=1"

.dist-artifacts: &dist-artifacts
  after_script:
    # list files
    - find dist
  artifacts:
    expire_in: 18h
    paths:
      - dist

.yum-cache: &yum-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/yum

.yum-update: &yum-update
  yum-config-manager --disable htcondor 1>/dev/null &&
  yum ${YUM_OPTS} -q update

.apt-cache: &apt-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/apt

.apt-update: &apt-update
  mkdir -p "${CI_PROJECT_DIR}/.cache/apt/partial" &&
  apt-get autoclean &&
  apt-get ${APT_OPTS} update

# -- dist -------------------

dist:tarball:
  <<: *dist-artifacts
  stage: dist
  image: python:3.6
  variables:
    GIT_STRATEGY: fetch
  script:
    - python -m pip install setuptools
    - python setup.py sdist bdist_wheel

# -- source -----------------

.source:el: &source-rhel
  <<: *dist-artifacts
  <<: *yum-cache
  image: centos
  stage: source
  dependencies:
    - dist:tarball
  before_script:
    - *yum-update
    - yum ${YUM_OPTS} install
          rpm-build
          rpmlint
          epel-rpm-macros
  script:
    - rpmbuild -ts --define "_srcrpmdir $(pwd)/dist" dist/${PKG_NAME}*.tar.gz
    - rpmlint dist/*.src.rpm
  artifacts:
    paths:
      - "dist/*.src.rpm"

source:rhel:el7:
  <<: *source-rhel
  image: igwn/base:el7

.source:debian: &source-debian
  <<: *dist-artifacts
  <<: *apt-cache
  image: debian
  stage: source
  dependencies:
    - dist:tarball
  before_script:
    - *apt-update
    - apt-get ${APT_OPTS} install
          dpkg-dev
  script:
    - pushd dist
    # rename tarball for debian orig
    - _tarball=$(find . -name "${PKG_NAME}-*.tar.gz")
    - _tarname=$(basename --suffix=".tar.gz" "${_tarball}")
    - _orig="${_tarname/-/_}.orig.tar.gz"
    - mv "${_tarball}" "${_orig}"
    # create debian source package files
    - tar -xf "${_orig}"
    - pushd ${_tarname}
    - dpkg-source --build .
    # clean up
    - popd
    - rm -rf ${_tarname}
  artifacts:
    paths:
      - "dist/*.orig.tar.*"
      - "dist/*.debian.tar.*"
      - "dist/*.dsc"

source:debian:stretch:
  <<: *source-debian
  image: igwn/base:stretch

#source:debian:buster:
#  <<: *source-debian
#  image: igwn/base:buster

# -- build ------------------

.build: &build
  <<: *dist-artifacts
  stage: build

.build:el: &build-rhel
  <<: *build
  <<: *yum-cache
  before_script:
    # install enough to create a src RPM and parse the build dependencies
    - *yum-update
    - yum ${YUM_OPTS} install
          yum-utils
          rpm-build
  script:
    - pushd dist
    - SRC_RPM="${PKG_NAME}-*.src.rpm"
    # install build dependencies for src rpm
    - yum-builddep ${YUM_OPTS} ${SRC_RPM}
    # build binary rpms
    - rpmbuild --rebuild --define "_rpmdir $(pwd)" ${SRC_RPM}
  artifacts:
    paths:
      - "dist/*/*.rpm"

.build:debian: &build-debian
  <<: *build
  <<: *apt-cache
  before_script:
    - *apt-update
    - apt-get ${APT_OPTS} install
          dpkg-dev
          devscripts
  script:
    # unpack tarball
    - pushd dist
    - find .
    - tar -xf ${PKG_NAME}_*.orig.tar.gz
    - pushd ${PKG_NAME}-*/
    # install build dependencies
    - mk-build-deps --tool "apt-get ${APT_OPTS}" --install --remove
    # build debian packages
    - dpkg-buildpackage -us -uc -b
    # clean up
    - popd
    - rm -rf ${PKG_NAME}-*/
  artifacts:
    paths:
      - "dist/*.buildinfo"
      - "dist/*.changes"
      - "dist/*.deb"

build:rhel:el7:
  <<: *build-rhel
  image: igwn/base:el7
  dependencies:
    - source:rhel:el7

build:debian:stretch:
  <<: *build-debian
  image: igwn/base:stretch
  dependencies:
    - source:debian:stretch

#build:debian:buster:
#  <<: *build-debian
#  image: igwn/base:buster
#  dependencies:
#    - source:debian:buster

# -- test -------------------

.test: &test
  stage: test
  image: python
  dependencies:
    - dist:tarball
  before_script:
    # install package and its dependencies
    - python -m pip install dist/${PKG_NAME}-*.tar.gz
    # install other dependencies (including those for testing)
    - tar --wildcards --strip-components 1 -xf dist/${PKG_NAME}-*.tar.gz */requirements.txt
    - python -m pip install -r requirements.txt
  script:
    # run test suite
    - python -m pytest --pyargs ${PKG_NAME} --cov-report= --cov=${PKG_NAME} --junitxml=junit.xml
    # run command-line "python -m <>"
    - python -m coverage run -a -m ${PKG_NAME} --help
    # print coverage report
    - python -m coverage report
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .cache/pip
  artifacts:
    reports:
      junit: junit.xml

test:python2.7:
  <<: *test
  image: python:2.7

test:python3.5:
  <<: *test
  image: python:3.5

test:python3.6:
  <<: *test
  image: python:3.6

test:python3.7:
  <<: *test
  image: python:3.7

test:python3.8:
  <<: *test
  image: python:3.8

# -- docs -------------------

doc:
  stage: test
  image: python:3.6
  variables:
    GIT_STRATEGY: fetch
  before_script:
    - python -m pip install sphinx
  script:
    - python -m pip install .  # to get dependencies
    - python setup.py build_sphinx
  artifacts:
    paths:
      - build/sphinx/html
